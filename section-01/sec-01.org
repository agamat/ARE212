#+AUTHOR:
#+TITLE:
#+OPTIONS:     toc:nil num:nil
#+LATEX_HEADER: \usepackage{mathrsfs}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \usepackage{booktabs}
#+LATEX_HEADER: \usepackage{dcolumn}
#+LATEX_HEADER: \usepackage{subfigure}
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: \RequirePackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\small,formatcom = {\color[rgb]{0.1,0.2,0.9}}}
#+LATEX: \newcommand{\ep}{{\bf e}^\prime}
#+LATEX: \renewcommand{\e}{{\bf e}}
#+LATEX: \renewcommand{\I}{{\bf I}}
#+LATEX: \renewcommand{\X}{{\bf X}}
#+LATEX: \renewcommand{\x}{{\bf x}}
#+LATEX: \renewcommand{\M}{{\bf M}}
#+LATEX: \renewcommand{\A}{{\bf A}}
#+LATEX: \renewcommand{\P}{{\bf P}}
#+LATEX: \renewcommand{\Xp}{{\bf X}^{\prime}}
#+LATEX: \renewcommand{\Mp}{{\bf M}^{\prime}}
#+LATEX: \renewcommand{\y}{{\bf y}}
#+LATEX: \renewcommand{\yp}{{\bf y}^{\prime}}
#+LATEX: \renewcommand{\yh}{\hat{{\bf y}}}
#+LATEX: \renewcommand{\yhp}{\hat{{\bf y}}^{\prime}}
#+LATEX: \renewcommand{\In}{{\bf I}_n}
#+LATEX: \renewcommand{\email}[1]{\textcolor{blue}{\texttt{#1}}}
#+LATEX: \renewcommand{\id}[1]{{\bf I}_{#1}}
#+LATEX: \newcommand{\myheader}[1]{\textcolor{black}{\textbf{#1}}}
#+LATEX: \setlength{\parindent}{0in}
#+STARTUP: fninline

*Introduction to =R=* \hfill
*ARE212*: Section 01 \\

The objective of this section is to review the syllabus and to introduce the =R= environment. If there is remaining time, I'll work through some basic code puzzles that will require you to work in =R=, but will more likely leave them for you to play with on your own. Today may be a little slow for those of you with substantial experience in =R=, but I promise we'll speed up soon. \\

*Download =R=*: The download of =R= will vary by operating system, but it will begin here in any event:\\

[[http://cran.r-project.org/][\email{cran.r-project.org}]] \\

The online documentation and installer routines are comprehensive. If you are new to =R=, then it might make sense to use the Mac or Windows distribution, along with the built-in editor to write and evaluate code. [[www.rstudio.com][Rstudio]] is a popular IDE that provides a somewhat more user-friendly interface than the base =R= installation. For the tech-oriented, the Linux distribution is very flexible; and I'd use [[http://www.gnu.org/software/emacs/][Emacs]] with the [[http://ess.r-project.org/][ESS]] package for editing.  If you are interested in using the Linux distribution and are having trouble with the setup, please see me. \\

I have included links to a few of the many resources on the web that provide gentle introductions to the =R= language. Those of you who have no experience with =R= or with programming in general will find it well worth your time to spend a few hours browsing those in your free time. In section, however, I will focus on presenting examples of code piece-by-piece in order to illustrate certain concepts. As always, please interrupt me with questions at any time. \\

*Working in =R=*

In order to download specific packages that are not bundled with the base distribution of =R=, such as the =foreign= package, you'll enter the following commands to install and load the package:

#+begin_src r :results none :exports code :tangle yes
  install.packages("foreign")
  library(foreign)
#+end_src

Once =foreign= is loaded, you'll have access to all of its constituent functions, including =read.csv= which will convert a comma-separated value worksheet (.csv) into a data frame[fn:: Note that it is also possible to read in =xls=, =dta=, tab-delimited, and many other types of data using similar functions.]. We will do that now, loading into memory the =auto.csv= into a data frame called =data=.

#+begin_src r :results output graphics :exports both :tangle yes :session
  data <- read.csv("auto.csv", header=TRUE)
#+end_src

#+RESULTS:

We can read the names from the data set; but they aren't much help.
#+begin_src r :results output graphics :exports both :tangle yes :session
  names(data)
#+end_src

#+RESULTS:
: [1] "V1" "V2" "V3"

We can replace the column headers with more descriptive variable names.

#+begin_src r :results output graphics :exports both :tangle yes :session
  names(data) <- c("price", "mpg", "weight")
#+end_src

#+RESULTS:

To get a sense of the data, list the first six observations:
#+begin_src r :results output graphics :exports both :tangle yes :session
  head(data)
#+end_src

#+RESULTS:
:   price mpg weight
: 1  4099  22   2930
: 2  4749  17   3350
: 3  3799  22   2640
: 4  4816  20   3250
: 5  7827  15   4080
: 6  5788  18   3670

With the columns appropriately named, we can refer to particular variables within the data set using the unique indexing in =R=, where data objects tend to be variants of lists and nested lists.

#+begin_src r :results output graphics :exports both :tangle yes :session
  head(data$mpg)
#+end_src

#+RESULTS:
: [1] 22 17 22 20 15 18

Next week, we'll do more in-depth analysis of this data. \\

*Linear algebra puzzles*: These notes will provide a code illustration  of the Linear Algebra review in Chapter 1 of the lecture notes.  Don't worry if you can't solve these puzzles.  Come back to them  later, once we have gone over =R= code in more detail.  There are  many correct ways to solve these puzzles.  We will go over a few  solutions in section.

 1. Let $\id{5}$ be a $5 \times 5$ identity matrix.  Demonstrate that $\id{5}$ is symmetric and idempotent using simple functions in =R=.

 2. Generate a $2 \times 2$ idempotent matrix $\X$, where $\X$ is not the identity matrix.  Demonstrate that $\X = \X\X$.

 3. Generate two random variables, $\x$ and $\e$, of dimension $n = 100$ such that $\x, \e \sim N(0,1)$.  Generate a random variable $\y$ according to the data generating process $y_i = x_i + e_i$.  Show that if you regress $\y$ on $\x$ using the canned linear regression routine =lm()=, then you will get an estimate of the intercept $\beta_0$ and the coefficient on $\x$, $\beta_1$, such that $\beta_0 = 0$ and $\beta_1 = 1$.

 4. Show that if $\lambda_1, \lambda_2, \ldots, \lambda_5$ are the eigenvectors of a $5 \times 5$ matrix $\A$, then $\mbox{tr}(\A) = \sum_{i=1}^5 \lambda_i$.

#+begin_src r :results graphics output :exports none :tangle yes
install.packages("foreign")

# Puzzle 1

I <- diag(5)
print(I)
print(I %*% I)

all(I == I %*% I)
all(I == t(I))

# Puzzle 2

X <- matrix(c(1,1,0,0), 2)
X2 <- matrix(c(.5,.25,1,.5),2)
all(X == X %*% X)
all(X2 == X2 %*% X2)

# Puzzle 3

n <- 100
x <- rnorm(n)
e <- rnorm(n)
y <- x + e

lm(y ~ x)

# Puzzle 4

A <- matrix(runif(25), 5) # generate 25 uniformly random
lambda <- eigen(A)$values # store the eigenvalues
print( sum(diag(A)) )
print( sum(lambda) )

#+end_src

#+results:

