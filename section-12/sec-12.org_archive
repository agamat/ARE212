#    -*- mode: org -*-


Archived entries from file c:/Users/pbaylis/Documents/GitHub/ARE212/section-12/sec-12.org


* Using Google API to get elevation data
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-04-29 Tue 20:07
  :ARCHIVE_FILE: ~/Documents/GitHub/ARE212/section-12/sec-12.org
  :ARCHIVE_CATEGORY: sec-12
  :END:
Switch gears. Suppose, now, that we want to find the elevation of each of market in the four sample states.  For this, we can use the Google Elevation API, which relies on URL requests, like we've seen in previous sections.  The following two functions build the URL request for a collection of coordinates. We'd like to send a request that looks something like this: \\

http://maps.googleapis.com/maps/api/elevation/json?locations=39.7391536,-104.9847034|39.7391536,-104.9847034&sensor=false \\

This is about to get complicated, so hang onto your hats.

#+begin_src R :results output graphics :exports both :tangle yes :session
library(RCurl)
library(RJSONIO)
convertCoords <- function(coord.collection) {
  apply(coord.collection, 1, function(x) { paste(x[2], x[1], sep = ",") })
}

getElevation <- function(coord.strings) {
  base.url <- "http://maps.googleapis.com/maps/api/elevation/json?locations="
  params <- "&sensor=false"
  coord.str <- paste(convertCoords(coord.strings), collapse = "|")
  query <- paste(base.url, coord.str, params, sep="")
  gotten <- getURL(query)

  output <- fromJSON(gotten, unexpected.escape = "skip")$results

  elev <- function(x) {
    return(x[1][["elevation"]])
  }

  res <- as.matrix(lapply(output, elev))
  return(res)
}

testmatrix <- matrix(c(-122.27,37.83,-157.49,1.87), nrow = 2, byrow = T)
convertCoords(testmatrix)
getElevation(testmatrix)
#+end_src

#+RESULTS:
: [1] "37.83,-122.27" "1.87,-157.49"
:      [,1]
: [1,] 22.27448
: [2,] 4.783094

=convertCoords()= expects a collection of coordinates where the first column is the longitude and the second column is the latitude. It transforms this into a character vector where each entry is of the form "[lat], [lon]". =getElevation()= takes in the character vector that =convertCoords()= outputs and returns the respective elevations. It's important to see that =getElevation()= concatenates the latlon strings to make the request to the Google API so that we only a single request per call of =getElevation()=. However, the Google API does not accept URLs that are too long.  I am not sure what qualifies as too long, but the 353 farmers' market coordinates throw an error.  So, we'll partition the coordinate collection.

#+begin_src R :results output graphics :exports both :tangle yes
partition <- function(df, each = 10) {
  s <- seq(ceiling(nrow(df) / each))
  suppressWarnings(res <- split(df, rep(s, each = each)))
  return(res)
}

elev.split <- lapply(partition(as.data.frame(coords)), getElevation)
elevation <- unlist(elev.split)
#+end_src

#+RESULTS:

Applying the =getElevation()= function to each partition will send out multiple requests.  The =elevation= collection contains the elevation for all farmers' markets.  This is pretty cool.  We don't need to store the elevations on disk.  We can rely on Google's data and raster sampling to grab the elevations on demand.  \\

Almost done.  The maps in =R= are decent.  But they are static and difficult to explore.  Instead, use CartoDB to view and explore the data, uploading directly from =R=.  Adjust the account name and API key accordingly:

#+begin_src R :results output graphics :exports both :tangle yes
library(CartoDB)
cartodb("pbaylis", api.key = "46611aa6e943054dfe074605b7107bdd96a45bb9")
#+end_src

#+RESULTS:

You will need to log into the CartoDB console and create a table with the appropriately named columns.  I'll show you how to sign up for a free account and set up a table in section.  Call this table =markets=.  The following functions will send the coordinates, elevations, and cluster identifiers to the =markets= table.

#+begin_src R :results none :exports code :tangle yes
uploadMarket <- function(record, table.name = "markets") {
  cartodb.row.insert(name = table.name,
    columns = list("x", "y", "cluster", "elevation"),
    values = as.list(record))
}

mkts <- data.frame(x = state.data$x, y = state.data$y,
  cluster = cl, elevation = elevation)

apply(mkts, 1, uploadMarket)
#+end_src

#+RESULTS:

Note that we don't need to assign the output to a variable; the side effect is the upload of each row in =mkts= to the =markets= CartoDB table.  (Again, we'll go over this in section.)  Once the data are in CartoDB, we have access to a host of incredible visualization tools. You can even share the map: \\

\begin{figure}[h]
\centering
\includegraphics[width=0.4\textwidth]{inserts/cdb.png}
\caption{\label{fig:cdb}\tred{cdb.io/1jTKf7o}}
\end{figure}
