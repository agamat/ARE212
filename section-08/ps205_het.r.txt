## PS 205 code for heteroskedasticity tests and robust standard errors

sfprecincts <- read.table("ps205data1.txt", header=TRUE)
attach(sfprecincts)

model1 <- lm(pct8yes ~ pctdem+pctblack)
summary(model1)

# plot residuals

e <- model1$residuals
e2 <- e^2
plot(pctdem, e2)
plot(pctblack, e2)

plot(model1)

# White's heteroskedasticity test

whitetest <- summary(lm(e2~pctdem+pctblack+(pctdem*pctblack)+(pctdem^2)+(pctblack^2)))
wteststat <- whitetest$r.squared * length(model1$fitted.values)
wdf <- length(model1$coefficients) - 1
1 - pchisq(wteststat, wdf)

# Breusch-Pagan heteroskedasticity test

b.p.test <- summary(lm(e2~pctdem+pctblack))
bpteststat <- b.p.test$r.squared * length(model1$fitted.values)
bpdf <- length(model1$coefficients) - 1
1 - pchisq(bpteststat, bpdf)

install.packages("sandwich")
library(sandwich)
install.packages("lmtest")
library(lmtest)

bptest(model1)

# Robust standard errors

coeftest(model1, vcov=sandwich)


# Example 2: Education in Uganda

netdata <- read.table("ps205data4.txt", header=T, sep="\t")
netdata <- na.omit(netdata)
netdata <- as.data.frame(netdata)
attach(netdata)

summary(model2 <- lm(education~age+altitude+rural))

# plot residuals

e <- model2$residuals
e2 <- e^2
plot(altitude, e2)
plot(age, e2)

plot(model2)


## Code for clustered standard errors
## http://people.su.se/~ma/mcluster.R

cl   <- function(dat,fm, cluster){
           attach(dat, warn.conflicts = F)
           library(sandwich)
		   library(lmtest)
           M <- length(unique(cluster))
           N <- length(cluster)
           K <- fm$rank
           dfc <- (M/(M-1))*((N-1)/(N-K))
           uj  <- apply(estfun(fm),2, function(x) tapply(x, cluster, sum));
           vcovCL <- dfc*sandwich(fm, meat=crossprod(uj)/N)
           coeftest(fm, vcovCL) }

# How many clusters?
length(unique(household))
		   
cl(netdata, model2, household)

## More code for clustered standard errors
## http://diffuseprior.wordpress.com/2012/06/15/standard-robust-and-clustered-standard-errors-computed-in-r/

ols <- function(form, data, robust=FALSE, cluster=NULL,digits=3){
	  r1 <- lm(form, data)
	  if(length(cluster)!=0){
	    data <- na.omit(data[,c(colnames(r1$model),cluster)])
	    r1 <- lm(form, data)
	  }
	  X <- model.matrix(r1)
	  n <- dim(X)[1]
	  k <- dim(X)[2]
	  if(robust==FALSE & length(cluster)==0){
	    se <- sqrt(diag(solve(crossprod(X)) * as.numeric(crossprod(resid(r1))/(n-k))))
	    res <- cbind(coef(r1),se)
	  }
	  if(robust==TRUE){
	    u <- matrix(resid(r1))
	    meat1 <- t(X) %*% diag(diag(crossprod(t(u)))) %*% X
	    dfc <- n/(n-k)   
	    se <- sqrt(dfc*diag(solve(crossprod(X)) %*% meat1 %*% solve(crossprod(X))))
	    res <- cbind(coef(r1),se)
	    }
	  if(length(cluster)!=0){
	    clus <- cbind(X,data[,cluster],resid(r1))
	    colnames(clus)[(dim(clus)[2]-1):dim(clus)[2]] <- c(cluster,"resid")
	    m <- dim(table(clus[,cluster]))
	    dfc <- (m/(m-1))*((n-1)/(n-k))
	    uclust  <- apply(resid(r1)*X,2, function(x) tapply(x, clus[,cluster], sum))
	    se <- sqrt(diag(solve(crossprod(X)) %*% (t(uclust) %*% uclust) %*% solve(crossprod(X)))*dfc)  
	    res <- cbind(coef(r1),se)
	  }
	  res <- cbind(res,res[,1]/res[,2],(1-pnorm(abs(res[,1]/res[,2])))*2)
	  res1 <- matrix(as.numeric(sprintf(paste("%.",paste(digits,"f",sep=""),sep=""),res)),nrow=dim(res)[1])
	  rownames(res1) <- rownames(res)
	  colnames(res1) <- c("Estimate","Std. Error","t value","Pr(>|t|)")
	  return(res1)
	}


ols(education~age+altitude+rural, netdata)
ols(education~age+altitude+rural, netdata, robust=TRUE)
ols(education~age+altitude+rural, netdata, cluster="household")

# Example 3: Replication of Boehmke et al.

gamingdata <- read.csv("ps205data5.csv", header=TRUE)

# get rid of missing data b/c clustering function doesn't check

prop5data <- na.omit(subset(gamingdata, select=c(Prop5_yes, gaming_exp_0500, nongam_exp_0500, exposure_interaction, 
Rep_Pres, per_urban_tract, med_age_tract, college_tract, inc_tract_1000, white_tract, indian_tract, crime_percap1K, 
pop2000, fips)))

summary(model3 <- lm(Prop5_yes ~ gaming_exp_0500 + nongam_exp_0500 + exposure_interaction + Rep_Pres + per_urban_tract + 
med_age_tract + college_tract + inc_tract_1000 + white_tract + indian_tract + crime_percap1K, weights=pop2000, data=prop5data))

## Code for clustered standard errors
## http://people.su.se/~ma/mcluster.R

cl   <- function(dat,fm, cluster){
           attach(dat, warn.conflicts = F)
           library(sandwich)
		   library(lmtest)
           M <- length(unique(cluster))
           N <- length(cluster)
           K <- fm$rank
           dfc <- (M/(M-1))*((N-1)/(N-K))
           uj  <- apply(estfun(fm),2, function(x) tapply(x, cluster, sum));
           vcovCL <- dfc*sandwich(fm, meat=crossprod(uj)/N)
           coeftest(fm, vcovCL) }
		   
cl(prop5data, model3, fips)


## Autocorrelation

## California building and foreclosures (in 1000s) by month, 2002-2010
foreclosedata <- read.table("ps205data6.txt", sep="\t", header=TRUE)
attach(foreclosedata)

plot(time, foreclosures, type="l")
lines(time, const_permits, type="l", col="red")

summary(timemodel <- lm(foreclosures ~ const_permits))

plot(timemodel)

## Durbin-Watson test

library(car)
durbinWatsonTest(timemodel)

## Breusch-Pagan test

bgtest(timemodel)

## Newey-West standard errors

coeftest(timemodel, vcov=NeweyWest(timemodel, lag=1, prewhite=FALSE))

